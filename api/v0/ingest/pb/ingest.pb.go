// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ingest.proto

package reqresp_pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message_MessageType int32

const (
	Message_ERROR_RESPONSE             Message_MessageType = 0
	Message_LIST_PROVIDERS             Message_MessageType = 1
	Message_LIST_PROVIDERS_RESPONSE    Message_MessageType = 2
	Message_GET_PROVIDER               Message_MessageType = 3
	Message_GET_PROVIDER_RESPONSE      Message_MessageType = 4
	Message_DISCOVER_PROVIDER          Message_MessageType = 5
	Message_DISCOVER_PROVIDER_RESPONSE Message_MessageType = 6
	Message_REGISTER_PROVIDER          Message_MessageType = 7
	Message_REGISTER_PROVIDER_RESPONSE Message_MessageType = 8
	Message_REMOVE_PROVIDER            Message_MessageType = 9
	Message_REMOVE_PROVIDER_RESPONSE   Message_MessageType = 10
)

var Message_MessageType_name = map[int32]string{
	0:  "ERROR_RESPONSE",
	1:  "LIST_PROVIDERS",
	2:  "LIST_PROVIDERS_RESPONSE",
	3:  "GET_PROVIDER",
	4:  "GET_PROVIDER_RESPONSE",
	5:  "DISCOVER_PROVIDER",
	6:  "DISCOVER_PROVIDER_RESPONSE",
	7:  "REGISTER_PROVIDER",
	8:  "REGISTER_PROVIDER_RESPONSE",
	9:  "REMOVE_PROVIDER",
	10: "REMOVE_PROVIDER_RESPONSE",
}

var Message_MessageType_value = map[string]int32{
	"ERROR_RESPONSE":             0,
	"LIST_PROVIDERS":             1,
	"LIST_PROVIDERS_RESPONSE":    2,
	"GET_PROVIDER":               3,
	"GET_PROVIDER_RESPONSE":      4,
	"DISCOVER_PROVIDER":          5,
	"DISCOVER_PROVIDER_RESPONSE": 6,
	"REGISTER_PROVIDER":          7,
	"REGISTER_PROVIDER_RESPONSE": 8,
	"REMOVE_PROVIDER":            9,
	"REMOVE_PROVIDER_RESPONSE":   10,
}

func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}

func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff993cce43359ffa, []int{0, 0}
}

type Message struct {
	// defines what type of message it is.
	Type Message_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=reqresp.pb.Message_MessageType" json:"type,omitempty"`
	// Value for the message
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff993cce43359ffa, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Message_MessageType {
	if m != nil {
		return m.Type
	}
	return Message_ERROR_RESPONSE
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("reqresp.pb.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
	proto.RegisterType((*Message)(nil), "reqresp.pb.Message")
}

func init() { proto.RegisterFile("ingest.proto", fileDescriptor_ff993cce43359ffa) }

var fileDescriptor_ff993cce43359ffa = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd1, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc7, 0xf1, 0x38, 0x84, 0x16, 0x1e, 0x51, 0x09, 0x0f, 0x55, 0x84, 0x3f, 0x32, 0x55, 0xa7,
	0x4e, 0x19, 0xe8, 0x0d, 0xa0, 0x56, 0x15, 0x89, 0x92, 0xea, 0x39, 0xca, 0x5a, 0xa5, 0xc2, 0xaa,
	0x58, 0xa8, 0x49, 0xb2, 0xf4, 0x16, 0x1c, 0x81, 0xe3, 0x30, 0x76, 0x64, 0x44, 0xc9, 0x19, 0xd8,
	0x51, 0x22, 0x90, 0x03, 0x9d, 0x6c, 0x7d, 0xfd, 0xfb, 0x4c, 0x06, 0xf7, 0xe9, 0x79, 0xa5, 0xf2,
	0x22, 0xd0, 0xd9, 0xba, 0x58, 0x23, 0x64, 0xea, 0x25, 0x53, 0xb9, 0x0e, 0xf4, 0x72, 0xf8, 0x65,
	0x43, 0x77, 0xa6, 0xf2, 0x3c, 0x5d, 0x29, 0x1c, 0x83, 0x53, 0x6c, 0xb4, 0xf2, 0xd9, 0x80, 0x8d,
	0x7a, 0x37, 0xd7, 0x81, 0x99, 0x05, 0x3f, 0x93, 0xdf, 0x33, 0xde, 0x68, 0x45, 0xcd, 0x18, 0x11,
	0x9c, 0xc7, 0xb4, 0x48, 0x7d, 0x7b, 0xc0, 0x46, 0x2e, 0x35, 0xf7, 0xe1, 0x9b, 0x0d, 0x47, 0xad,
	0x25, 0x22, 0xf4, 0x04, 0x51, 0x44, 0x0b, 0x12, 0x72, 0x1e, 0x3d, 0x48, 0xe1, 0x59, 0x75, 0xbb,
	0x0f, 0x65, 0xbc, 0x98, 0x53, 0x94, 0x84, 0x13, 0x41, 0xd2, 0x63, 0x78, 0x09, 0x67, 0x7f, 0x9b,
	0x01, 0x36, 0x7a, 0xe0, 0x4e, 0x85, 0x79, 0xf3, 0xf6, 0xf0, 0x1c, 0xfa, 0xed, 0x62, 0xc6, 0x0e,
	0xf6, 0xe1, 0x64, 0x12, 0xca, 0xbb, 0x28, 0x11, 0x64, 0xc4, 0x3e, 0x72, 0xb8, 0xd8, 0xc9, 0x86,
	0x75, 0x6a, 0x46, 0x62, 0x1a, 0xca, 0xb8, 0xcd, 0xba, 0x35, 0xdb, 0xc9, 0x86, 0x1d, 0xe0, 0x29,
	0x1c, 0x93, 0x98, 0x45, 0x89, 0x30, 0xe8, 0x10, 0xaf, 0xc0, 0xff, 0x17, 0x0d, 0x81, 0x5b, 0xff,
	0xbd, 0xe4, 0x6c, 0x5b, 0x72, 0xf6, 0x59, 0x72, 0xf6, 0x5a, 0x71, 0x6b, 0x5b, 0x71, 0xeb, 0xa3,
	0xe2, 0xd6, 0xb2, 0xd3, 0x7c, 0xd2, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xb9, 0xb5, 0xc1,
	0xb4, 0x01, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintIngest(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintIngest(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIngest(dAtA []byte, offset int, v uint64) int {
	offset -= sovIngest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovIngest(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovIngest(uint64(l))
	}
	return n
}

func sovIngest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIngest(x uint64) (n int) {
	return sovIngest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIngest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Message_MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIngest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIngest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIngest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIngest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIngest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIngest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIngest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIngest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIngest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIngest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIngest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIngest = fmt.Errorf("proto: unexpected end of group")
)
